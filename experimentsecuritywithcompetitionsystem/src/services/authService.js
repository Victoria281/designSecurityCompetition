config = require('../config/config');
const { Console } = require('console');
const { resourceLimits } = require('worker_threads');
const pool = require('../config/database')
const nodemailer = require('nodemailer');
const { mailtrapUserName, mailtrapPassword } = require('../config/config');
const transporter = nodemailer.createTransport({
    host: "smtp.mailtrap.io",
    port: 2525,
    auth: {
      user: mailtrapUserName, //generated by Mailtrap
      pass: mailtrapPassword //generated by Mailtrap
    }
});

module.exports.authenticate = (email, codeLogin, email_code) => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, connection) => {
            if (err) {
                return reject(err);
            } else {
                console.log("Calling authenticate promise")
                try {
                    connection.query(`SELECT user.user_id, fullname, email, user_password, role_name, user.role_id  
                   FROM user INNER JOIN role ON user.role_id=role.role_id AND email='${email}'`, {}, (err, rows) => {
                        if (err) {
                            return reject(err);
                        } else {
                            if (rows.length == 1) {
                                console.log(codeLogin)
                                if (codeLogin) {
                                    connection.query(`SELECT login_code FROM login_log, user WHERE user.user_id=login_log.userid AND email='${email}'`, {}, (err, result) => {
                                        if (err) {
                                            return reject(err);
                                        } else {
                                            console.log("email code checking now")
                                            console.log(email_code)
                                            console.log(result[0].login_code)
                                            console.log(rows[0].user_id)
                                            if (result[0].login_code == email_code) {
                                                connection.query(`UPDATE login_log SET login_code = ?, failed_login_attempts = 0 WHERE userid = ?`, [null, rows[0].user_id], (err, result) => {
                                                    if (err) {
                                                        return reject(err);
                                                    } else {
                                                        console.log(result)
                                                        console.log("login code was removed")
                                                        console.log(result);
                                                        return resolve(rows);
                                                    }
                                                    connection.release();
                                                });


                                            } else {
                                                console.log("email code is not correct")
                                                rows[0].codechecked = false
                                                return resolve(rows);
                                            }
                                        }
                                    });
                                }
                                else {
                                    console.log(rows);
                                    return resolve(rows);
                                }

                            } else {
                                return reject('Login has failed');
                            }
                        }
                    });



                } catch (error) {
                    return reject(error);
                }
            }
        });
    })
}

module.exports.loginAttempts = (email, state) => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, connection) => {
            if (err) {
                return reject(err);
            } else {
                console.log("Calling attempt promise")
                try {
                    connection.query(`SELECT user.user_id, login_log.failed_login_attempts FROM user, login_log 
                    WHERE user.user_id=login_log.userid AND email='${email}'`, {}, (err, result) => {
                        if (err) {
                            return reject(err);
                        } else {
                            if (result.length > 0) {
                                console.log(result[0])
                                let user_id = result[0].user_id;
                                let failed_attempts = result[0].failed_login_attempts;
                                console.log(failed_attempts)
                                if (state) {
                                    failed_attempts += 1
                                }
                                else {
                                    failed_attempts = 0
                                }
                                connection.query(`UPDATE login_log SET failed_login_attempts = ? WHERE userid = ?`, [failed_attempts, user_id], (err, result) => {
                                    if (err) {
                                        return reject(err);
                                    } else {
                                        console.log(result)
                                        console.log("updated")
                                    }
                                    connection.release();
                                });
                            }

                        }
                    });
                } catch (error) {
                    return reject(error);
                }
            }
        });
    })
}



module.exports.checkLogin = (email) => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, connection) => {
            if (err) {
                return reject(err);
            } else {
                console.log("Checking login")
                try {
                    console.log("calling sql")
                    console.log(email)
                    connection.query(`SELECT user.user_id, login_log.failed_login_attempts, login_log.login_code FROM user, login_log 
                    WHERE user.user_id=login_log.userid AND email='${email}'`, {}, (err, result) => {
                        if (err) {
                            return reject(err);
                        } else {
                            console.log(result)
                            if (result.length > 0) {
                                let user_id = result[0].user_id;
                                let failed_attempts = result[0].failed_login_attempts;
                                console.log(failed_attempts)
                                if (result[0].login_code != null) {
                                    console.log("code is already set")
                                    return resolve({ newcode: false, coderequired: true })
                                }
                                else if (failed_attempts >= 3) {
                                    var code = '';
                                    var chara = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
                                    for (var i = 0; i < 6; i++) {
                                        code += chara.charAt(Math.floor(Math.random() * chara.length));
                                    }
                                    connection.query(`UPDATE login_log SET login_code = ? WHERE userid = ?`, [code, user_id], (err, result) => {
                                        if (err) {
                                            return reject(err);
                                        } else {
                                            console.log("SENDING EMAIL")
                                            sendEmail(email, code)
                                            return resolve({ newcode: true, coderequired: true })
                                        }
                                        connection.release();
                                    });
                                }
                                else {
                                    return resolve({ newcode: false, coderequired: false })
                                }
                            }

                        }
                    });
                } catch (error) {
                    return reject(error);
                }
            }
        });
    })
}


const sendEmail = (email, code) => {
    return new Promise((resolve, reject) => {
        if (code == null){
            pool.getConnection((err, connection) => {
                if (err) {
                    return reject(err);
                } else {
                    connection.query(`SELECT login_code FROM login_log, user WHERE user.user_id=login_log.userid AND email='${email}'`, {}, (err, result) => {
                if (err) {
                    return reject(err);
                } else {
                    console.log(result[0].login_code)
                    code = result[0].login_code;
                    try {
                        let info = transporter.sendMail({
                            from: `Admin<admin@admin.com>`, // sender address
                            to: email, // list of receivers
                            subject: "Verify Account from Bee competition system admin", // Subject line
                            text: `Hi We have detected multiple failed login attempts to your sccount, Please verify your identity by providing this code ${code}`, // plain text body
                            html: `Hi We have detected multiple failed login attempts to your sccount, Please verify your identity by providing this code ${code}`, // html body
                        });
                        return resolve({ status: 'success', description: 'Email sent' });
                    } catch (error) {
                        return resolve({ status: 'fail', description: error });
                    }
                }
            });
                }
            });
            
        }
        else{
            try {
            let info = transporter.sendMail({
                from: `Admin<admin@admin.com>`, // sender address
                to: email, // list of receivers
                subject: "Verify Account from Bee competition system admin", // Subject line
                text: `Hi We have detected multiple failed login attempts to your sccount, Please verify your identity by providing this code ${code}`, // plain text body
                html: `Hi We have detected multiple failed login attempts to your sccount, Please verify your identity by providing this code ${code}`, // html body
            });
            return resolve({ status: 'success', description: 'Email sent' });
        } catch (error) {
            return resolve({ status: 'fail', description: error });
        }
        }
        
    })
}

module.exports.sendEmail